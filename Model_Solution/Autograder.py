# grade_student.py
# LMS wrapper for running auto_mark.py on student submissions

import zipfile
import os
import shutil
import sys
import json
from pathlib import Path
# Correctly import the main function from the final auto-marker script
from auto_mark_reweighted import run_all_checks

WORK_DIR = "/tmp/student_submission"

def extract_submission(zip_path: str, extract_to: str):
    """Safely extracts a zip file to a specified directory."""
    if os.path.exists(extract_to):
        shutil.rmtree(extract_to)
    os.makedirs(extract_to, exist_ok=True)

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    print(f"‚úÖ Submission extracted to: {extract_to}")

def find_latest_json(results_dir: Path):
    """Finds the most recently created JSON file in the results directory."""
    json_files = list(results_dir.glob("*.json"))
    if not json_files:
        return None
    return max(json_files, key=lambda f: f.stat().st_mtime)

def main(submission_zip: str):
    """Main function to process a student submission."""
    # Step 1: Extract submission
    extract_submission(submission_zip, WORK_DIR)

    # Step 2: Run auto marker from within the submission directory
    # This ensures all file paths in the marker are relative to the project root
    original_dir = os.getcwd()
    try:
        os.chdir(WORK_DIR)
        print("\n--- Running Auto-Marker ---")
        run_all_checks(".")
        print("--- Auto-Marker Complete ---\n")
    finally:
        os.chdir(original_dir) # Change back to original directory

    # Step 3: Find the generated result JSON
    result_json_path = find_latest_json(Path(WORK_DIR) / "results")
    if not result_json_path:
        print("‚ùå No results file was generated by the auto-marker.")
        print("üéØ LMS-GRADE: 0")
        return

    # Step 4: Load results and print LMS-readable output
    with open(result_json_path) as jf:
        results = json.load(jf)
    
    total_score = results.get("total_score", 0)
    breakdown = results.get("breakdown", {})

    # Print the final grade for the LMS to capture
    print(f"üéØ LMS-GRADE: {total_score}")

    # Print a human-readable summary to the console
    print("\nüìã Summary of Results:")
    for section, data in breakdown.items():
        score = data.get('score', 'N/A')
        details = data.get('details', 'No details.')
        # For dockerfiles, details is a dict. For others, it's a string.
        if isinstance(details, dict):
             # Just show the score for the summary
             print(f"  - {section.replace('_', ' ').title()}: Score {score}")
        else:
             print(f"  - {section.replace('_', ' ').title()}: {details}")


    # Step 5: Generate a detailed feedback file for the student
    lms_feedback_path = Path(WORK_DIR) / "LMS_feedback.txt"
    with open(lms_feedback_path, "w") as out:
        out.write(f"Auto-Marking Feedback\n{'='*50}\n")
        out.write(f"Submission: {Path(submission_zip).name}\n")
        out.write(f"Overall Score: {total_score} / 100\n\n")
        
        out.write("--- Detailed Breakdown ---\n")
        for section, data in breakdown.items():
            score = data.get('score', 'N/A')
            details = data.get('details', 'No details.')
            max_marks = {
                "dockerfiles": 20, "simulation_config": 15, "service_configs": 15,
                "docker_compose": 15, "state_and_flags": 10, "documentation": 10,
                "folder_structure": 15
            }.get(section, '?')

            out.write(f"\n## {section.replace('_', ' ').title()} ({score}/{max_marks})\n")
            if isinstance(details, dict):
                for item_name, item_feedback in details.items():
                    out.write(f"  - {item_feedback}\n")
            else:
                out.write(f"  - {details}\n")

    print(f"\nüìÅ Detailed feedback file written to: {lms_feedback_path}")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: python {sys.argv[0]} <path_to_student_submission.zip>")
        sys.exit(1)

    submission_zip_path = sys.argv[1]
    if not os.path.isfile(submission_zip_path):
        print(f"‚ùå Submission file not found: {submission_zip_path}")
        sys.exit(1)

    main(submission_zip_path)
